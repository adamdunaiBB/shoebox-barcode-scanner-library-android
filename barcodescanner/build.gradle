apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

configurations {
    ktlint
    includeJars
}

def autodisposeVersion = '2.0.0'
def kotlinVersion = '1.4.10'
def ktlintVersion = '0.36.0'
def rxAndroidVersion = '3.0.0'
def rxJavaVersion = '3.0.6'
def rxKotlinVersion = '3.0.0'
def supportLibraryVersion = '1.2.0'

dependencies {
    implementation(name: "datacollection", ext: "aar")

    implementation "androidx.appcompat:appcompat:$supportLibraryVersion"
    implementation "com.uber.autodispose2:autodispose-android:$autodisposeVersion"
    implementation "com.uber.autodispose2:autodispose-androidx-lifecycle:$autodisposeVersion"
    implementation "com.uber.autodispose2:autodispose-lifecycle:$autodisposeVersion"
    implementation "com.uber.autodispose2:autodispose:$autodisposeVersion"
    implementation "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava3:rxkotlin:$rxKotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    ktlint "com.pinterest:ktlint:$ktlintVersion"
}

project.afterEvaluate {
    def isAndroidLibraryProject = project.plugins.hasPlugin('com.android.library')
    if(isAndroidLibraryProject) {
        task copyDeps(type:Copy) {
            from configurations.includeJars {
                include '**/*.jar'
            }
            into "./build/intermediates/packaged-classes/release/libs" // this folder gets packaged inside the AAR
        }
        mergeReleaseJniLibFolders.dependsOn copyDeps // only this stage worked for me - neither earlier, nor later

        task copyDebugDeps(type:Copy) {
            from configurations.includeJars {
                include '**/*.jar'
            }
            into "./build/intermediates/packaged-classes/debug/libs"
        }
        mergeDebugJniLibFolders.dependsOn copyDebugDeps
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt", "--reporter=checkstyle,output=${buildDir}/reports/ktlint.xml"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt", "--reporter=checkstyle,output=${buildDir}/reports/ktlint.xml"
}
